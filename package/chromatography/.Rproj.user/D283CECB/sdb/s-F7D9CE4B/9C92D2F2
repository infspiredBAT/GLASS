{
    "contents" : "HTMLWidgets.widget({\n\n    name: 'chromatography',\n\n    type: 'output',\n\n    initialize: function(el, w, h) {\n\t  \n      \n        var margin  = {top: 10, right: 10, bottom: 100, left: 40},\n            margin2 = {top: 430, right: 10, bottom: 20, left: 40},\n            width   = w - margin.left - margin.right,\n            height  = h - margin.top - margin.bottom,\n            height2 = h - margin2.top - margin2.bottom;\n    \n        var widthScale   = d3.scale.linear()\n    \t    \t\t\t             .range([0,width]);\n            width2Scale  = d3.scale.linear()\n    \t\t\t\t                 .range([0,width]),\t\n            heightScale  = d3.scale.linear()\n        \t\t\t\t             .range([height,0]),\n    \t      height2Scale = d3.scale.linear()\n    \t\t\t\t                 .range([height2,0]);   \n                             \n        var line = d3.svg.line()\n                \t\t .x(function(d){return widthScale(d.x)})\n    \t\t    \t\t     .y(function(d){return heightScale(d.y)});\n      \n        var svg = d3.select(el).append(\"svg\")\n                               .attr(\"width\", width + margin.left + margin.right)\n                               .attr(\"height\", height + margin.top + margin.bottom);\n\n        var focus = svg.append(\"g\")\n                       .attr(\"class\", \"focus\")\n            \t\t       .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n        \n        svg.append(\"defs\").append(\"clipPath\")\n                  \t\t    .attr(\"id\", \"clip\")\n        \t\t\t            .append(\"rect\")\n        \t\t\t            .attr(\"width\", width)\n        \t\t\t            .attr(\"height\", height);\t\n                          \n\t      var context = svg.append(\"g\")\n\t\t\t\t    \t           .attr(\"class\", \"context\")\n\t\t\t\t\t               .attr(\"transform\", \"translate(\" + margin2.left + \",\" + margin2.top + \")\");\n\n    \t  var brush = d3.svg.brush().on(\"brushend\", brushed);\n\t\n\t      function brushed() {\n\t\t        widthScale.domain(brush.empty() ? width2Scale.domain() : brush.extent());\n\t\t        //console.log(brush.extent())\n\t\t        focus.selectAll(\"g\").selectAll(\"path\").attr(\"d\", line);\n\t\t    }\n\n        return {\n            svg: svg,\n            line: line,\n\t\t        context: context,\n\t\t        brush: brush,\n            focus: focus,\n            widthScale: widthScale,\n            heightScale: heightScale,\n            width: w,\n            height: h,\n\t\t        height2: height2\n        }\n    },\n\n    resize: function(el, width, height, instance) {\n        if (instance.lastValue) {\n            this.renderValue(el, instance.lastValue, instance);\n        }\n/*    \n     d3.select(el).selectAll(\"svg\")\n          .attr(\"width\", width)\n          .attr(\"height\", height);\n\n     instance.size([width, height]).resume();\n*/\n    },\n\n    renderValue: function(el, x, instance) {\n      \n        instance.lastValue = x;\n\t      var data = x[\"data\"];\n        var domain_y = x[\"meta\"][\"max_y\"];\n    \n\t      console.log(x[\"meta\"]);\n        var svg = instance.svg;\n        var line = instance.line;\n        var focus = instance.focus;\n\t      var context = instance.context;\n\t      var brush = instance.brush;\n        var widthScale = instance.widthScale;\n        var heightScale = instance.heightScale;\n\t      var height2 = instance.height2;\n   \n\t      // calculate the scale domains\n        // probably takes a long time, maybe calculate this in R and pass in meta ? \n                           \n\t      //var domain_y = d3.max(\n\t\t\t  //    [d3.max(data[0][\"data\"].map(function(c){return c[\"y\"];})),\n\t\t    //     d3.max(data[1][\"data\"].map(function(c){return c[\"y\"];})),\n\t\t\t  //     d3.max(data[2][\"data\"].map(function(c){return c[\"y\"];})),\n\t  \t  //     d3.max(data[3][\"data\"].map(function(c){return c[\"y\"];}))]\n\t      //);\n\n        \n        \n        var domain_x = d3.max(data[0][\"data\"].map(function(c){return c[\"x\"];}));\n\t      widthScale.domain([0,domain_x]);\n\t      width2Scale.domain([0,domain_x]);\n\t      heightScale.domain([0,domain_y]);\n\t      height2Scale.domain([0,domain_y]);\n        \n        //visualise introns/exons\n        context.append(\"rect\")\n               .attr(\"x\", widthScale(x[\"meta\"][\"meta_intrex\"][\"start\"][0]))\n               .attr(\"y\", 0)\n               .attr(\"rx\",5)\n               .attr(\"ry\",5)\n               .attr(\"opacity\",0.5)\n               .attr(\"width\", widthScale(x[\"meta\"][\"meta_intrex\"][\"end\"][0]))\n               .attr(\"height\", 55);\n\t\t\t\t\t\t\n\t      brush.x(width2Scale);\n\t      var group_a = focus.append(\"g\");\n\t      var group_c = focus.append(\"g\");\n\t      var group_g = focus.append(\"g\");\t\n\t      var group_t = focus.append(\"g\");\n\t\n\t      var group_ac = context.append(\"g\");\n\t      var group_cc = context.append(\"g\");\n\t      var group_gc = context.append(\"g\");\t\n\t      var group_tc = context.append(\"g\");\n\t\n\t      var linec = d3.svg.line()\n\t\t                  .x(function(d){return widthScale(d.x)})\n\t\t                  .y(function(d){return height2Scale(d.y)});\n\t\t\t\n\t      group_a.selectAll(\"path\")\n\t\t\t         .data([data[0].data])\n\t\t\t         .enter()\n\t\t\t         .append(\"path\")\n               .attr(\"class\",\"path\")\n\t\t\t         .attr(\"d\",line)\n\t\t\t         .attr(\"fill\",\"none\")\n\t\t\t         .attr(\"stroke\",\"#33CC33\")\n\t\t\t         .attr(\"stroke-width\",0.75);\t\t\t\t\n\t      group_c.selectAll(\"path\")\n\t\t\t         .data([data[1].data])\n\t\t\t         .enter()\n\t\t\t         .append(\"path\")\n\t\t\t         .attr(\"d\",line)\n\t\t\t         .attr(\"fill\",\"none\")\n\t\t\t         .attr(\"stroke\",\"#0000FF\")\n\t\t\t         .attr(\"stroke-width\",0.75);\t\t\t\n \t      group_g.selectAll(\"path\")\n\t\t\t         .data([data[2].data])\n\t\t\t         .enter()\n\t\t\t         .append(\"path\")\n\t\t\t         .attr(\"d\",line)\n\t\t\t         .attr(\"fill\",\"none\")\n\t\t\t         .attr(\"stroke\",\"#000000\")\n\t\t\t         .attr(\"stroke-width\",0.75);\t\t\t\t\n\t      group_t.selectAll(\"path\")\n\t\t\t         .data([data[3].data])\n\t\t\t         .enter()\n\t\t\t         .append(\"path\")\n\t\t\t         .attr(\"d\",line)\n\t\t\t         .attr(\"fill\",\"none\")\n\t\t\t         .attr(\"stroke\",\"#FF0000\")\n\t\t\t         .attr(\"stroke-width\",0.75);\n\t\t\t\n\t      group_ac.selectAll(\"path\")\n\t\t\t          .data([data[0].data])\n\t\t\t          .enter()\n\t\t\t          .append(\"path\")\n\t\t\t          .attr(\"d\",linec)\n\t\t\t          .attr(\"fill\",\"none\")\n\t\t\t          .attr(\"stroke\",\"#33CC33\")\n\t\t\t          .attr(\"stroke-width\",0.5);\n\t      group_cc.selectAll(\"path\")\n\t\t\t          .data([data[1].data])\n\t\t\t          .enter()\n\t\t\t          .append(\"path\")\n\t\t\t          .attr(\"d\",linec)\n\t\t\t          .attr(\"fill\",\"none\")\n\t\t\t          .attr(\"stroke\",\"#0000FF\")\n\t\t\t          .attr(\"stroke-width\",0.5);\t\t\t\n\t      group_gc.selectAll(\"path\")\n\t\t\t          .data([data[2].data])\n\t\t\t          .enter()\n\t\t\t          .append(\"path\")\n\t\t\t          .attr(\"d\",linec)\n\t\t\t          .attr(\"fill\",\"none\")\n\t\t\t          .attr(\"stroke\",\"#000000\")\n\t\t\t          .attr(\"stroke-width\",0.5);\t\t\t\t\n\t      group_tc.selectAll(\"path\")\n\t\t\t          .data([data[3].data])\n\t\t\t          .enter()\n\t\t\t          .append(\"path\")\n\t\t          \t.attr(\"d\",linec)\n\t\t\t          .attr(\"fill\",\"none\")\n\t\t\t          .attr(\"stroke\",\"#FF0000\")\n\t\t\t          .attr(\"stroke-width\",0.5);\n\t\t\n\t      context.append(\"g\")\n\t             .attr(\"class\", \"x brush\")\n\t             .call(brush)\n\t             .selectAll(\"rect\")\n\t             .attr(\"y\", -6)\n\t             .attr(\"height\", height2 + 7);\n\n    }\n\n});\n",
    "created" : 1440512773335.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "979312964",
    "id" : "9C92D2F2",
    "lastKnownWriteTime" : 1440584305,
    "path" : "~/dev/tp53_sanger_browser/package/chromatography/inst/htmlwidgets/chromatography.js",
    "project_path" : "inst/htmlwidgets/chromatography.js",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "js"
}