{
    "contents" : "require(shiny)\nlibrary(sangerseqR)\nsource(\"helpers.R\")\n\ng_call      <- NULL             #annotated basecall data\ng_ins       <- NULL             #intensities file\ng_meta      <- NULL             #meta data used in graphs \ng_choices   <- NULL\ng_selected  <- NULL\ng_selected_zoom_index <- 0\n\n#\ng_abif <- NULL\n\nshinyServer(function(input,output,session) {\n  \n    get_file <- reactive({\n       # if (!is.null(input$select_file)) return(input$select_file$datapath)\n        if (!is.null(input$select_file)) return(input$select_file)\n        \n        else return(NULL)  \n    })\n    \n    loading_processed_files <- reactive ({\n        if(!is.null(get_file())) {\n            file <- get_file()$datapath\n            file_name <- get_file()$name\n            withProgress(message = paste('Loading file',file_name,'...',sep=\" \"), value = 1, {\n                # TODO - make sure shiny only allows ab1 files (???)\n                #        - otherwise chceck if file has correct format\n                g_abif <- sangerseqR::read.abif(file)\n                ins<- get_intensities(g_abif@data)\n                res <-get_call_data(g_abif@data) \n                call <- res$call\n                g_meta<<- res$meta\n                call.dt <- data.table(call,key=\"id\")\n                g_call<<- call.dt        \n                g_ins <<- ins\n                \n            })\n            \n            return(\"loaded\")\n        }\n        return(\"not\")\n    })\n    \n    \n    output$plot <- renderChromatography({\n        if(loading_processed_files() != \"not\") {\n#            withProgress(message=\"Rendering plot ...\", value=1, {\n                chromatography(g_ins,g_meta)\n#            })\n        }\n    })\n\n    \n    output$variance_info <- renderPrint({\n        if(loading_processed_files() != \"not\") {\n            if(input$choose_variance != \"\") {\n                tryCatch({\n                    cat(g_call[id == as.integer(input$choose_variance),paste(\"chosen variance: \",get(\"reference\"),\"(\",get(\"exon_intron\"),\":\",gen_coord,\") -> \",call,\" with quality \",quality,sep=\"\")])\n                }, error = function(er){\n                    if(grepl(\"NAs introduced\",er)) cat(\"you may type in just integers\")\n    #                else cat(\"Some error\")\n                })\n            } else cat(\"choose variance by number of peak (above)\")\n        } else cat(\"you must load some file first\")\n    })\n\n    \n    first_update_chosen_variances <- observe({\n        if(loading_processed_files() != \"not\") {\n          #TO DO: more sophisticated rules (might need to take intesitied into account)\n          g_choices <<- g_call[call != reference  & seq_trim != \"low_qual\" & trace_peak != \"NA\"& gen_coord!=\"\"]         \n        }\n    })\n   \n\n    update_chosen_variances <- observe({\n        input$execute_btn\n        isolate({\n            if(loading_processed_files() != \"not\") {\n                if(is.null(g_choices))\n                    g_choices <<- g_call[as.integer(input$choose_variance)]\n                else {\n                    if(!as.integer(input$choose_variance) %in% g_choices$id) {\n                        new_variance <- g_call[as.integer(input$choose_variance)]\n                        new_variance$call <- input$change_peak\n                        g_choices <<- rbind(g_choices,new_variance)\n                    } else if(g_choices[id == as.integer(input$choose_variance)]$call != input$change_peak)\n                        g_choices[id == as.integer(input$choose_variance)]$call <<- input$change_peak\n                }\n            }\n        })\n    })\n\n\n#    output$chosenCheckboxes <- reactive({\n#        return(loading_processed_files() != \"not\" & !is.null(g_choices))\n#    })\n#    outputOptions(output, \"chosenCheckboxes\", suspendWhenHidden = F)\n\n\n#     output$table2 <- DT::renderDataTable({\n#         input$execute_btn\n#         input$delete_btn\n#         if(loading_processed_files() != \"not\" & !is.null(g_choices)) {\n#             DT::datatable(\n#                 g_choices,\n#                 rownames = checkboxRows(g_choices), escape = -1,\n#                 options = list(dom = 'ti')\n#             )\n#         }\n#     })\n# \n# \n#     variace_selected_2 <- observe({\n#         if(loading_processed_files() != \"not\") {\n#             g_selected <<- g_choices[input$table2_selected,id]\n#             #cat(input$table2_selected)\n#         }\n#     })\n\n\n    add_checkboxes <- reactive({\n        input$execute_btn\n        input$delete_btn\n        checkboxes <- paste0('<input type=\"checkbox\" name=\"row', g_choices$id, '\" value=\"', g_choices$id, '\"',\"\")\n        for(i in 1:nrow(g_choices)) {\n            if(g_choices[i]$id %in% g_selected) checkboxes[i] <- paste0(checkboxes[i],\" checked>\",\"\")\n            else checkboxes[i] <- paste0(checkboxes[i],\">\",\"\")\n        }\n        return(checkboxes)\n    })\n\n\n    output$chosen_variances_table <- shiny::renderDataTable({\n        input$execute_btn\n        input$delete_btn\n        if(loading_processed_files() != \"not\" & !is.null(g_choices)) {\n#            add_checkbox_buttons <- paste0('<input type=\"checkbox\" name=\"row', g_choices$id, '\" value=\"', g_choices$id, '\">',\"\")\n            #add_edit_buttons <- paste0('<a class=\"go-edit\" href=\"\" data-id=\"', g_choices$id, '\"><i class=\"fa fa-crosshairs\"></i></a>')\n            add_edit_buttons <- paste0('<input type=\"button\" class=\"go-edit\" value=\"Edit\" name=\"btn',g_choices$id,'\" data-id=\"',g_choices$id,'\"',\">\")\n            add_zoom_buttons <- paste0('<input type=\"button\" class=\"go-zoom\" value=\"Zoom\" name=\"btn',g_choices$id,'\" data-id=\"',g_choices$id,'\"',\">\")\n            add_checkbox_buttons <- add_checkboxes()\n            cbind(Pick=add_checkbox_buttons, Edit=add_edit_buttons, Zoom=add_zoom_buttons, g_choices)\n        }\n    }, options = list(orderClasses=c(-1,-2,-3), paging=F, columnDefs=list(list(targets=c(0,1,2), searchable=F, orderable=F, title=\"\")))\n    , escape=c(-1,-2,-3)\n    , callback = \n        \"function(table) {\n                table.on('change.dt', 'tr td input:checkbox', function() {\n                    setTimeout(function () {\n                        Shiny.onInputChange('rows', $(this).add('tr td input:checkbox:checked').parent().siblings(':nth-child(4)').map(function() {\n                            return $(this).text();\n                        }).get())\n                    }, 10); \n                });\n                table.on('click', '.go-edit', function(e) {\n                    e.preventDefault();\n                    $el = $(this);\n                    var id_data = $el.data('id');\n                    Shiny.onInputChange('goEdit', {\n                        id: id_data\n                    });\n                });\n                table.on('click', '.go-zoom', function(e) {\n                    e.preventDefault();\n                    $el = $(this);\n                    var id_data = $el.data('id');\n                    Shiny.onInputChange('goZoom', {\n                        id: id_data\n                    });\n                });\n            }\"\n    )\n\n\n    variance_select <- observe({\n        if(loading_processed_files() != \"not\") {\n            g_selected <<- str_trim(input$rows)\n            g_selected_zoom_index <<- 0\n#            g_selected_edit_index <<- 0\n        }\n    })\n\n\n    goEdit_handler <- observe({\n        if(loading_processed_files() != \"not\") {\n            if(is.null(input$goEdit)) return()\n            updateTextInput(session,\"choose_variance\",value=paste0(input$goEdit$id))\n        }\n    })\n\n\n    goZoom_handler <- observe({\n        if(loading_processed_files() != \"not\") {\n            if(is.null(input$goZoom)) return()\n            cat(paste0(input$goZoom$id,\",\"))\n            session$sendCustomMessage(type = 'zoom_message',message = paste0(input$goZoom$id))\n        }\n    })\n\n\n#     edit_handler <- observe({\n#         input$edit_btn\n#         isolate({\n#             if(length(g_selected) != 0) {\n#                 index <- g_selected_zoom_index + 1\n#                 g_selected_zoom_index <<- (1 + g_selected_zoom_index) %% length(g_selected)\n#                 updateTextInput(session,\"choose_variance\",value=paste0(g_selected[index]))\n#             }\n#         })\n#     })\n\n\n#     zoom_handler <- observe({\n#         input$zoom_btn\n#         isolate({\n#             if(length(g_selected) != 0) {\n#                 index <- g_selected_zoom_index + 1\n#                 g_selected_zoom_index <<- (1 + g_selected_zoom_index) %% length(g_selected)\n#                 cat(paste0(g_selected[index],\",\"))\n#                 session$sendCustomMessage(type = 'zoom_message',message = paste0(g_selected[index]))\n#             }\n#         })\n#     })\n\n\n    delete_handler <- observe({\n        input$delete_btn\n        isolate({\n            if(length(g_selected) != 0) {\n                g_choices <<- g_choices[-match(g_selected,id)]\n                g_selected <<-  NULL\n            }\n        })\n    })\n})",
    "created" : 1440512757793.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3673923023",
    "id" : "5BD5F80E",
    "lastKnownWriteTime" : 1440509351,
    "path" : "~/dev/tp53_sanger_browser/shiny/chrom/server.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}