{
    "contents" : "library(zoo)\nlibrary(seqinr)\n# the function extracts the signal intesities for each channel and returns it formatted for the javascript chromatograph\nget_intensities <- function(data) {\n  \n    #abi file documentation http://www.bioconductor.org/packages/release/bioc/vignettes/sangerseqR/inst/doc/sangerseq_walkthrough.pdf\n    \n    abi_data <- data\n    \n    #TO DO intensities data will be used for data analysis (not only visualisations)\n    #create better R structure leave the conversion for later steps before visualisation\n    \n    \n    #initialize long lists of x's and y's for naming the coordinates\n    y9 <-setNames(as.list(abi_data$DATA.9),\n                 rep(c(\"y\"),times=length(abi_data$DATA.9)))\n    x9 <-setNames(as.list(c(1:length(abi_data$DATA.9))),\n                 rep(c(\"x\"),times=length(abi_data$DATA.9)))\n    y10<-setNames(as.list(abi_data$DATA.10),\n                  rep(c(\"y\"),times=length(abi_data$DATA.10)))\n    x10<-setNames(as.list(c(1:length(abi_data$DATA.10))),\n                  rep(c(\"x\"),times=length(abi_data$DATA.10)))\n    y11<-setNames(as.list(abi_data$DATA.11),\n                  rep(c(\"y\"),times=length(abi_data$DATA.11)))\n    x11<-setNames(as.list(c(1:length(abi_data$DATA.11))),\n                  rep(c(\"x\"),times=length(abi_data$DATA.11)))\n    y12<-setNames(as.list(abi_data$DATA.12),\n                  rep(c(\"y\"),times=length(abi_data$DATA.12)))\n    x12<-setNames(as.list(c(1:length(abi_data$DATA.12))),\n                  rep(c(\"x\"),times=length(abi_data$DATA.12)))\n    \n    xylist9  <- list()\n    xylist10 <- list()\n    xylist11 <- list()\n    xylist12 <- list()\n    \n    for(i in 1:length(abi_data$DATA.9)){xylist9[[i]]<-append(x9[i],y9[i])}\n    for(i in 1:length(abi_data$DATA.10)){xylist10[[i]]<-append(x10[i],y10[i])}\n    for(i in 1:length(abi_data$DATA.11)){xylist11[[i]]<-append(x11[i],y11[i])}\n    for(i in 1:length(abi_data$DATA.12)){xylist12[[i]]<-append(x12[i],y12[i])}\n    \n    #extract the order of nucleotide order from abi file FWO_.1\n    list9 <-append(substring(abi_data$FWO,1,1),list(xylist9))\n    list10<-append(substring(abi_data$FWO,2,2),list(xylist10))\n    list11<-append(substring(abi_data$FWO,3,3),list(xylist11))\n    list12<-append(substring(abi_data$FWO,4,4),list(xylist12))\n    \n    list9names <-setNames(list9,c(\"name\",\"data\"))\n    list10names<-setNames(list10,c(\"name\",\"data\"))\n    list11names<-setNames(list11,c(\"name\",\"data\"))\n    list12names<-setNames(list12,c(\"name\",\"data\"))\n    \n    listALL<-list(list9names,list10names,list11names,list12names)\n    \n    return(listALL)   \n}\n\n#function extracting \nget_call_data <- function(data){\n  \n    #TO DO if(length(data$PLOC.1)<=length(data$PBAS.1)){}\n    qual      <- data$PCON.2\n    rm7qual   <- rollmean(qual,k=7)\n    rm7qualext<- data.frame(c(rep(rm7qual[1],3),rm7qual,rep(rm7qual[length(qual)-6],3)))  #cbind returns data frame if atleast one argument is a data frame\n    res       <- generate_ref(data$PBAS.2)\n    seq_trim  <- str_split(data$PBAS.2,pattern=\"\")[[1]]\n    seq_trim[rm7qualext<12|qual<10]<-\"low_qual\"\n    #save send to Vojta\n    #+ fasta files with refs\n    call      <- cbind(c(1:length(data$PLOC.2)),data$PLOC.2,\n                       str_split(data$PBAS.2,pattern=\"\")[[1]],\n                       seq_trim,qual,rm7qualext,res$g_ref,stringsAsFactors = FALSE)\n    colnames(call)<-c(\"id\",\"trace_peak\",\"call\",\"seq_trim\",\n                      \"quality\",\"7rollmean_qual\",\"reference\",\n                      \"gen_coord\",\"exon_intron\")\n    \n    # changing the sequence coordinates to intensities coordinates for the brush tool\n    res$meta$meta_intrex$start <- lapply(res$meta$meta_intrex$start,function (x) {call$trace_peak[x]})\n    res$meta$meta_intrex$end   <- lapply(res$meta$meta_intrex$end  ,function (x) {call$trace_peak[x]})\n    return(list(call=call,meta=res$meta))\n    \n}\n\ngenerate_ref <-function(seq){\n    refs   <- read.fasta(\"../../data/ref_ex_in.fa\",as.string=TRUE)\n    g_ref  <- c(rep(\"\",nchar(abif@data$PBAS.2)))     #generated reference\n    coord  <- c(rep(NA,nchar(abif@data$PBAS.2)))\n    intrex <- c(rep(NA,nchar(abif@data$PBAS.2)))\n    meta_intrex   <- data.frame(attr=character(),start=numeric(),end=numeric()) #data for showing introns/exons in brush, maybe there is a cleverer way to do this\n    #STEP 1.  \n    for(ref in refs){\n        m<-matchPattern(pattern = toupper(ref[1]),\n                        subject = seq,\n                        max.mismatch = 10,\n                        min.mismatch=0,\n                        with.indels = TRUE)\n        \n        if(length(m)!=0){\n            if(m@ranges@width==\n               as.integer(strsplit(attr(ref,\"Annot\"),split='_')[[1]][5])){ #if no indels\n                if(nmismatch(pattern=toupper(ref[1]),m)>0){                #if there are variations we must make sure\n                    #print(mismatch(pattern=toupper(ref[1]),m))             #to assign ref\n                    g_ref[start(m):end(m)]  <- strsplit(toupper(ref),\"\")[[1]]    \n                }else{                                                                    #no variations\n                    g_ref[start(m):end(m)]  <- suppressWarnings(as.matrix(m))\n                }\n                coord[start(m):end(m)]  <- (strsplit(attr(ref,\"name\"),\"_\")[[1]][3]:\n                                            strsplit(attr(ref,\"name\"),\"_\")[[1]][4])\n                intrex[start(m):end(m)] <- strsplit(attr(ref,\"name\"),\"_\")[[1]][2]                  \n                meta_intrex <- rbind(meta_intrex,\n                                     data.frame(attr=strsplit(attr(ref,\"name\"),\"_\")[[1]][2],\n                                     start=start(m),end=end(m)))\n            }else{\n              #deal with indels\n            }\n        }\n    }\n    max_y <- max(data$DATA.9,data$DATA.10,data$DATA.11,data$DATA.12)   #max_y prevoiusly calculeted in javascript, faster in R\n    return(list(g_ref=cbind(g_ref,coord,intrex),meta=list(meta_intrex=meta_intrex,max_y=max_y)))\n}\n\n",
    "created" : 1440512759528.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3764463967",
    "id" : "E75F93A0",
    "lastKnownWriteTime" : 1440577970,
    "path" : "~/dev/tp53_sanger_browser/shiny/chrom/helpers.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}